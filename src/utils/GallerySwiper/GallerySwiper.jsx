
import { useState, useEffect, useRef, useCallback} from "react";
import "./GallerySwiper.css";
const GallerySwiper = ({ arrayImg, option, nameGallery }) => {
	const controll = option.controll;
	const Infinit = option.Infinit;
	const animationTime = option.animationTime * 1000;
	const winowsCount = option.winowsCount; //üëà –ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω —Å–ª–∞–π–¥–µ—Ä–∞
	const distanceSlide = option.distanceSlide; //üëà –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å–ª–∞–π–¥–∞–º–∏
	const bullets = option.bullets; //üëà –ë—É–ª–ª–µ—Ç—ã
	const bulletsNumber = option.bulletsNumber; //üëà –ë—É–ª–ª–µ—Ç—ã —Å —Ü–∏—Ñ—Ä–∞–º–∏
	const bulletsImg = option.bulletsImg; //üëà –ë—É–ª–ª–µ—Ç—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
	const progressBar = option.progressBar; //üëà –ü—Ä–æ–≥—Ä–µ—Å—Å –ë–∞—Ä
	const trekColor = option.trekColor; //üëà –¶–≤–µ—Ç —Ç—Ä–µ–∫–∞
	const activeTrekColor = option.activeTrekColor; //üëà –¶–≤–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
	const autoScrollingleft = option.autoScrollingleft; //üëà –ê–≤—Ç–æ–ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ –≤ –ª–µ–≤–æ
	const autoScrollingRigth = option.autoScrollingRigth; //üëà –ê–≤—Ç–æ–ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä–∞–≤–æ
	const autoScrollingInterval = option.autoScrollingInterval * 1000; //üëà –ê–≤—Ç–æ–ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä–∞–≤–æ
	const element = useRef(null); //üëà –°–ª–∞–π–¥
	const wrappGallery = useRef(null); //üëà –û–±—ë—Ä—Ç–∫–∞ —Å–ª–∞–π–¥–∞
	const galleryWin = useRef(null); //üëà –û–∫–Ω–æ —Å–ª–∞–π–¥–∞
	const [widthWin, setWidthWin] = useState(); //üëà –®–∏—Ä–∏–Ω–∞ —Å–ª–∞–π–¥–∞
	const [slides, setSlides] = useState([...arrayImg]); //üëà –ú–∞—Å—Å–∏–≤ —Å–ª–∞–π–¥–æ–≤
	const [offset, setOffset] = useState(0); //üëà –°–¥–≤–∏–≥ —Å–ª–∞–π–¥–∞
	const [bigPhoto, setBigPhoto] = useState(false);
	const [clonesCount, setClonesCount] = useState({
		// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–æ–Ω–æ–≤ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–ª–∞–π–¥–∞
		beginning: 0,
		end: 0, 
	});
	const percentShift = (widthWin / 100) * option.percentShift;
	const [touchScreen, setTouchScreen] = useState(false);
	const [shiftLR, setShiftLR] = useState(undefined);
	const [posX1, setPosX1] = useState(0);
	const [posX2, setPosX2] = useState(0);
	const [transition, setTransition] = useState(animationTime); // –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
	const [widthScreen, setWidthScreen] = useState(window.innerWidth);
	const [margin, setMargin] = useState(0);
	const [activeSlide, setActiveSlide] = useState("1");
	const [countTime, setCountTime] = useState(0);
	const winowsCountCss = winowsCount * 100;
	const addCountSlide = Math.ceil(winowsCount);
	//üëá –û—Ç—Å—Ç—É–ø —Å –º–µ–¥–∏–∞–∑–∞–ø—Ä–æ—Å–æ–º
	useEffect(() => {
		const handleResize = (event) => {
			setWidthScreen(event.target.innerWidth);
		};
		function margins–°hanging() {
			if (widthScreen < 560.9) {
				setMargin(distanceSlide.xs560);
			}
			if (widthScreen < 768.9 && widthScreen > 560.9) {
				setMargin(distanceSlide.sm768);
			}
			if (widthScreen < 1024.9 && widthScreen > 768.9) {
				setMargin(distanceSlide.md1024);
			}
			if (widthScreen < 1366.9 && widthScreen > 1024.9) {
				// setMargin(distanceSlide.xlg1366);
			}
			if (widthScreen > 1366.9) {
				setMargin(distanceSlide.xlg1366);
			}
		}
		margins–°hanging();
		window.addEventListener("resize", handleResize);
		return () => {
			window.removeEventListener("resize", handleResize);
		};
	}, [margin, distanceSlide, widthScreen]);
	//üëá –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–ª–∞–π–¥–∞ —Å –∫–ª–æ–Ω–∞–º–∏
	useEffect(() => {
		const newSlides = [...arrayImg];
		if (Infinit) {
			if (addCountSlide === 1) {
				setSlides([newSlides[newSlides.length - 1], ...newSlides, newSlides[0]]);
				setClonesCount({ beginning: 1, end: addCountSlide });
				return;
			}
			if (addCountSlide === 2) {
				setSlides([
					newSlides[newSlides.length - 1],
					...newSlides,
					newSlides[0],
					newSlides[1],
				]);
				setClonesCount({ beginning: 1, end: addCountSlide });
				return;
			}
			if (addCountSlide === 3) {
				setSlides([
					newSlides[newSlides.length - 1],
					...newSlides,
					newSlides[0],
					newSlides[1],
				]);
				setClonesCount({ beginning: 1, end: addCountSlide });
				return;
			}
		}
		setSlides([...newSlides]);
	}, [Infinit, arrayImg, addCountSlide]);
	//üëá –õ–æ–≥–∏–∫–∞ –±–µ—Å–∫–æ–Ω–µ—á–≥–æ–≥–æ —Å–ª–∞–π–¥–µ—Ä–∞
	useEffect(() => {
		if (!Infinit) return;
		if (offset === 0 && widthWin !== undefined) {
			setTimeout(() => {
				setTransition(0);
				setOffset(-((widthWin + margin) * (slides.length - 1 - clonesCount.end)));
			}, animationTime);
			return;
		}
		if (offset === -(widthWin * (slides.length - clonesCount.end)) && widthWin !== undefined) {
			setTimeout(() => {
				setTransition(0);
				setOffset(-((widthWin + margin) * clonesCount.beginning));
			}, animationTime);
			return;
		}
	}, [Infinit, offset, widthWin, slides, clonesCount, transition, animationTime, margin]);
	//üëá –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ¬´—à–∏—Ä–∏–Ω–∞¬ª, –∫–æ–≥–¥–∞ –æ–∫–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
	useEffect(() => {
		// –ü–æ–ª—É—á–∏—Ç—å ¬´—à–∏—Ä–∏–Ω—É¬ª –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ —Å–ø–∏—Å–æ–∫ –º–µ–Ω—è–µ—Ç—Å—è
		function handlerShow() {
			const newWidth = galleryWin.current.clientWidth;
			setWidthWin(newWidth);
			setOffset(-clonesCount.beginning * (widthWin + margin));
		}
		const sliderEl = galleryWin.current.offsetWidth;
		const resizeHandler = () => {
			setWidthWin(sliderEl);
		};
		handlerShow();
		resizeHandler();
		galleryWin.current.addEventListener("onshow", handlerShow, true);
		window.addEventListener("resize", resizeHandler, true);
		galleryWin.current.removeEventListener("onshow", handlerShow, true);
		// –£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ –º–µ–Ω—è—Ç—å —à–∏—Ä–∏–Ω—É –∏ offset
		return () => {
			window.removeEventListener("resize", resizeHandler, true);
		};
	}, [clonesCount, widthWin, margin]);
	//üëá –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∏—Ä–∏–Ω—ã —Å–ª–∞–π–¥a
	useEffect(() => {
		const slider = document.querySelectorAll(`.${element.current.className}`);
		slider.forEach((el) => {
			el.style.minWidth = `${widthWin}px`;
			el.style.marginRight = `${margin}px`;
		});
	}, [widthWin, winowsCountCss, margin]);
	//üëá –õ–æ–≥–∏–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
	useEffect(() => {
		if (transition === 0) {
			setTimeout(() => {
				setTransition(animationTime);
			}, animationTime);
		}
	}, [transition, animationTime]);
	//üëá –ü—Ä–æ–≤–µ—Ä–∫–∞ –ü–ö –∏–ª–∏ touchscreen
	useEffect(() => {
		if (
			/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent) ||
			/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.platform)
		) {
			setTouchScreen(true);
		}
	}, [touchScreen]);
	//üëá –ê–≤—Ç–æ–ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ
	useEffect(() => {
		if (countTime >= 9) {
			setCountTime(0);
		}
		const timeoutID = setTimeout(() => {
			setCountTime((time) => (time = time + 1));
			if (autoScrollingleft) {
				setOffset((currentOffset) => {
					let newOffset = currentOffset - (widthWin + margin);
					if (Math.abs(newOffset / (widthWin + margin)) > arrayImg.length) {
						setActiveSlide("1");
					} else {
						setActiveSlide(`${Math.abs(newOffset / (widthWin + margin))}`);
					}
					const maxOffset = -(widthWin * (slides.length - 1));
					return Math.max(newOffset, maxOffset);
				});
			}
			if (autoScrollingRigth) {
				setOffset((currentOffset) => {
					let newOffset = currentOffset + (widthWin + margin);
					if (Math.abs(newOffset / (widthWin + margin)) <= 0) {
						setActiveSlide(`${arrayImg.length}`);
					} else {
						setActiveSlide(`${Math.abs(newOffset / (widthWin + margin))}`);
					}
					return Math.min(newOffset, 0);
				});
			}
		}, autoScrollingInterval);

		return () => {
			// üëáÔ∏è –û—á–∏—Å—Ç–∏—Ç–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è, –∫–æ–≥–¥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç
			clearTimeout(timeoutID);
		};
	}, [
		countTime,
		autoScrollingleft,
		autoScrollingInterval,
		autoScrollingRigth,
		arrayImg.length,
		widthWin,
		margin,
		offset,
		activeSlide,
		slides.length,
	]);

	//! –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
	//* –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è + –∞–∫—Ç–∏–≤–Ω—ã–π –±—É–ª–ª–µ—Ç
	function handlerLeftBtn() {
		setOffset((currentOffset) => {
			let newOffset = currentOffset + (widthWin + margin);
			if (Math.abs(newOffset / (widthWin + margin)) <= 0) {
				setActiveSlide(`${arrayImg.length}`);
			} else {
				setActiveSlide(`${Math.abs(newOffset / (widthWin + margin))}`);
			}
			return Math.min(newOffset, 0);
		});
	}
	//* –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è + –∞–∫—Ç–∏–≤–Ω—ã–π –±—É–ª–ª–µ—Ç
	function handlerRigthBtn() {
		setOffset((currentOffset) => {
			let newOffset = currentOffset - (widthWin + margin);
			if (Math.abs(newOffset / (widthWin + margin)) > arrayImg.length) {
				setActiveSlide("1");
			} else {
				setActiveSlide(`${Math.abs(newOffset / (widthWin + margin))}`);
			}
			const maxOffset = -(widthWin * (slides.length - 1));
			return Math.max(newOffset, maxOffset);
		});
	}
	//* –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ –ø–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
	function dragStartHandler(e) {
		if (touchScreen) {
			setPosX1(Math.round(e.touches[0].pageX));
		} else {
			setPosX1(e.pageX);
		}
	}
	//* –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
	function dragOverHandler(e) {
		if (touchScreen) {
			setPosX2(posX1 - Math.round(e.touches[0].pageX));
		} else {
			setPosX2(posX1 - e.pageX);
		}
		if (posX2 >= 0) {
			setShiftLR(true);
		}
		if (posX2 < 0) {
			setShiftLR(false);
		}
	}
	//* –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–∞–π–¥–∞
	function dragEndHandler(e) {
		if (shiftLR) {
			if (Math.abs(posX2) > percentShift) {
				handlerRigthBtn();
			}
		}
		if (!shiftLR) {
			if (Math.abs(posX2) > percentShift) {
				handlerLeftBtn();
			}
		}
	}
	//* –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–ª–ª–µ—Ç–æ–≤
	function handlerBullet(e, el) {
		setActiveSlide(el.id);
		if (Infinit) {
			setOffset(-(widthWin + margin) * el.id);
		} else {
			if (el.id === "1") {
				setOffset(0);
			} else {
				setOffset(-(widthWin + margin) * (el.id - 1));
			}
		}
	}
	//* –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É
	function handlerBigPhoto() {
		setBigPhoto((big) => (big = !big));
	}
	return (
		<>
			{nameGallery === "main" && (
				<div className="slider" ref={galleryWin}>
					<div className="slider__window" style={{ width: `${winowsCountCss}%` }}>
						<div
							className="slider__container"
							style={{
								transitionDuration: `${transition}ms`,
								transform: `translateX(${offset}px)`,
							}}
							draggable={true}
							onDragStart={(e) => dragStartHandler(e)}
							onDragOver={(e) => dragOverHandler(e)}
							onDragEnd={(e) => dragEndHandler(e)}
							onTouchStart={(e) => dragStartHandler(e)}
							onTouchMove={(e) => dragOverHandler(e)}
							onTouchEnd={(e) => dragEndHandler(e)}
							ref={wrappGallery}
						>
							{slides.map((el, i) => {
								return (
									<div
										className={`slider__item ${bigPhoto ? "activeBig" : ""}`}
										data-slider={el.id}
										ref={element}
										key={i}
									>
										<img
											src={el.img}
											alt=""
											data-img={el.id}
											className="slider__img"
											onDoubleClick={handlerBigPhoto}
										/>
										<div className="slider__text-box">{el.title}</div>
										<div className="slider__text-descrip">{el.description}</div>
									</div>
								);
							})}
						</div>
					</div>
					{controll && (
						<div className="slider__controll">
							<button className="slider__btn_left" onClick={handlerLeftBtn}>
								<svg
									width="31px"
									height="28px"
									viewBox="0 -2 24 24"
									xmlns="http://www.w3.org/2000/svg"
								>
									<path
										d="M6 12H18M6 12L11 7M6 12L11 17"
										stroke="#000000"
										strokeWidth="2"
										strokeLinecap="round"
										strokeLinejoin="round"
									/>
								</svg>
							</button>
							<button className="slider__btn_rigth" onClick={handlerRigthBtn}>
								<svg
									width="31px"
									height="28px"
									viewBox="0 -2 24 24"
									xmlns="http://www.w3.org/2000/svg"
								>
									<path
										d="M6 12H18M18 12L13 7M18 12L13 17"
										stroke="#000000"
										strokeWidth="2"
										strokeLinecap="round"
										strokeLinejoin="round"
									/>
								</svg>
							</button>
						</div>
					)}
					{bullets && (
						<div className="slider__bullets">
							{arrayImg.map((el) => {
								return (
									<button
										name="button"
										key={el.id}
										className={`slider__bullet ${
											el.id === activeSlide ? "active-bullet" : ""
										}`}
										data-slider={el.id}
										onClick={(e) => handlerBullet(e, el)}
									>
										{bulletsNumber && <span className="num-slide">{el.id}</span>}
										{bulletsImg && (
											<img src={el.img} alt="" className="slider__bullet-img" />
										)}
									</button>
								);
							})}
						</div>
					)}
					{progressBar && (
						<div className="slider__progress">
							<div
								className="slider__progress_trek"
								style={{
									background: `linear-gradient(90deg, ${activeTrekColor} 0%, ${activeTrekColor} ${
										(100 / arrayImg.length) * activeSlide
									}%, ${trekColor} ${
										(100 / arrayImg.length) * activeSlide
									}%, ${trekColor} 100%)`,
								}}
							></div>
						</div>
					)}
				</div>
			)}
		</>
	);
};

export default GallerySwiper;
